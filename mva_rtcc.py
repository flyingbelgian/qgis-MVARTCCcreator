# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MvaRtcc
                                 A QGIS plugin
 Creates MVA and RTCC surfaces from coordinates in CSV
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-27
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Paul Haubourdin
        email                : paul.haubourdin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction

from qgis.core import QgsVectorLayer, QgsField, QgsFeature, QgsPoint, QgsLineString, QgsPolygon, QgsMultiPolygon, QgsProject
from qgis.core import QgsSymbol, QgsRendererCategory, QgsCategorizedSymbolRenderer, QgsCoordinateReferenceSystem
from qgis.core import QgsCoordinateTransform


import csv
from . import conversions as conv
# from .conversions import ft2m

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mva_rtcc_dialog import MvaRtccDialog
import os.path


class MvaRtcc:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MvaRtcc_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MVA RTCC Creator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MvaRtcc', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/mva_rtcc/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MVA RTCC Creator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&MVA RTCC Creator'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MvaRtccDialog()

        # show the dialog
        self.dlg.show()

        self.dlg.btnCreate.clicked.connect(self.evt_btnCreate_clicked)


        # Run the dialog event loop
        result = self.dlg.exec_()

        if result:
            pass

    def evt_btnCreate_clicked(self):

        # Get MOC to be used for RTCC surfaces
        moc = self.dlg.dsbMoc.value()
        mocUnit = self.dlg.cmbMocUnits.currentText()
        if mocUnit == "ft":
            moc = moc * conv.ft2m

        # Get buffer to be used for RTCC surfaces
        buffer = self.dlg.dsbBuffer.value()
        bufferUnit = self.dlg.cmbBufferUnits.currentText()
        if bufferUnit == "NM":
            buffer = buffer * conv.nm2m
        
        coordinates = []
        polygon = {}
        polygons = []
        datalayer = {}
        datalayers = []

        with open(self.dlg.filename) as file:
            csvfile = csv.reader(file)
            firstline = True
            secondline = True
            prevlayer = ""
            prevpolygon = ""

            ### Hard coded color codes to be replaced with csv source at some point
            ### Alternatively a user interface with standard range of colors to allow for different sector altitudes
            ### Even if user isn't happy with the colors, the color range can be easily changed in QGIS GUI as all categories are already defined
            layerColors = {
                "1500":"#ff0000",
                "1600":"#ff4400",
                "1700":"#ff8800",
                "1800":"#ffcc00",
                "2000":"#ddff00",
                "2100":"#aaff00",
                "2200":"#66ff00",
                "2500":"#22ee00",
                "2700":"#00ff22",
                "3000":"#00ff66",
                "3500":"#00ffaa",
                "3600":"#00ffee",
                "4000":"#00ccff",
                "4500":"#0088ff",
                "5000":"#0044ff",
                "5500":"#0000ff"
            }

            for line in csvfile:
                if firstline:
                    firstline = False
                    # pass
                else:
                    if line[self.dlg.cmbElevation.currentIndex()] != prevlayer and not secondline:
                        polygons.append(polygon)
                        datalayers.append(datalayer)
                        polygons = []
                        coordinates = []
                    elif line[self.dlg.cmbSurface.currentIndex()] != prevpolygon and not secondline:
                        polygons.append(polygon)
                        coordinates = []
                    secondline = False
                    x = float(line[self.dlg.cmbLon.currentIndex()])
                    y = float(line[self.dlg.cmbLat.currentIndex()])
                    elevft = int(line[self.dlg.cmbElevation.currentIndex()])
                    elevm = round(elevft * conv.ft2m,2)
                    z = elevm
                    layerID = str(line[self.dlg.cmbElevation.currentIndex()])
                    polygonID = str(line[self.dlg.cmbSurface.currentIndex()])
                    coordinates.append((x,y,z))
                    polygon = {"polygon":polygonID, "elevft":elevft, "elevm":elevm, "coordinates":coordinates}
                    datalayer = {"layer": layerID, "polygons":polygons}
                    prevlayer = line[self.dlg.cmbElevation.currentIndex()]
                    prevpolygon = line[self.dlg.cmbSurface.currentIndex()]

        polygons.append(polygon)
        datalayers.append(datalayer)

        # Create layer for MVA Sectors
        layerMva = QgsVectorLayer('polygon', 'MVA Sectors', 'memory')
        layerMva.setCrs(self.dlg.crs)
        prMva = layerMva.dataProvider()
        prMva.addAttributes([
            QgsField("MVA Sector Elev (ft)", QVariant.Int),
            QgsField("Surface Elev (m)", QVariant.Double)
        ])
        layerMva.updateFields()

        # Populate the MVA Sectors layer with data from CSV
        for datalayer in datalayers:
            polyfeature = QgsFeature()
            polygons = []
            for polygon in datalayer["polygons"]:
                poly = QgsPolygon(QgsLineString([QgsPoint(*p) for p in polygon["coordinates"]]))
                polygons.append(poly)
            multipoly = QgsMultiPolygon(polygons)
            polyfeature.setGeometry(multipoly)
            polyfeature.setAttributes([polygon["elevft"],polygon["elevm"]])
            prMva.addFeatures([polyfeature])
        layerMva.updateExtents()
        QgsProject.instance().addMapLayers([layerMva])

        # Apply categorised symbology to MVA Sectors
        myRenderListMva = []
        for feature in layerMva.getFeatures():
            elev = feature["MVA Sector Elev (ft)"]
            symbol = QgsSymbol.defaultSymbol(layerMva.geometryType())
            symbol.setColor(QColor(layerColors[str(elev)]))
            symbol.setOpacity(0.5)
            layerRender = QgsRendererCategory(elev,symbol, str(elev))
            myRenderListMva.append(layerRender)
        myRendererMva = QgsCategorizedSymbolRenderer("MVA Sector Elev (ft)", myRenderListMva)
        layerMva.setRenderer(myRendererMva)
        
        # Create temporary layer with copy of MVA Sectors to start creating the RTCC Surfaces
        # This layer is never added to the map and only used to generate the required polygons
        layerRtccTemp = layerMva.clone()

        ### Following code was generated by ChatGPT to automatically select the correct EPSG for the applicable UTM zone
        def get_utm_crs(lon, lat):
            # Calculate UTM zone number
            zone_number = int((lon + 180) / 6) + 1

            # Determine if it's Northern or Southern Hemisphere
            if lat >= 0:
                epsg_code = 32600 + zone_number  # Northern Hemisphere UTM
            else:
                epsg_code = 32700 + zone_number  # Southern Hemisphere UTM

            return QgsCoordinateReferenceSystem(f"EPSG:{epsg_code}")

        # Calculate the centroid of the entire layer's bounding box
        extent = layerRtccTemp.extent()
        bbox_centroid = extent.center()
        bbox_lon = bbox_centroid.x()  # Longitude of the bounding box center
        bbox_lat = bbox_centroid.y()  # Latitude of the bounding box center

        # Determine the UTM CRS for the entire layer based on the bounding box centroid
        target_crs = get_utm_crs(bbox_lon, bbox_lat)

        # The source CRS is obtained from the dialog box where the user identified the CRS
        source_crs = self.dlg.crs

        # Iterate over the features in the temporary RTCC layer, transform to UTM to allow buffer application in (m), then transform back to source crs
        layerRtccTemp.startEditing()
        for feature in layerRtccTemp.getFeatures():
            geom = feature.geometry()
            geom.transform(QgsCoordinateTransform(source_crs, target_crs, QgsProject.instance()))
            buffergeom = geom.buffer(buffer,90) # 90 vertices per quarter turn, equals one vertex per degree of arc
            buffergeom.transform(QgsCoordinateTransform(target_crs, source_crs, QgsProject.instance()))
            feature.setGeometry(buffergeom)
            feature.setAttribute(1, round(feature.attributes()[1] - moc, 2))
            layerRtccTemp.updateFeature(feature)
        layerRtccTemp.commitChanges()
    
        ### Following code was generated by ChatGPT to iterate through the polygons from highest to lowest, each time cutting out any polygon that's lower
        features = []
        field_index = layerRtccTemp.fields().indexOf('MVA Sector Elev (ft)')
        # Retrieve all features and store them along with their height values
        for feature in layerRtccTemp.getFeatures():
            features.append((feature, feature['MVA Sector Elev (ft)']))
        # Sort features by "MVA Sector Elev (ft)" in descending order
        features.sort(key=lambda x: x[1], reverse=True)
        # Create a list to store the result (updated polygons)
        result_features = []
        # Iterate over the features
        for i, (feature, height) in enumerate(features):
            # Start with the original polygon geometry
            current_geometry = feature.geometry()
            # Check for overlap with previous features (lower heights)
            for j in range (i + 1, len(features)):
                lower_feature, lower_height = features[j]
                if lower_height < height: # We found a lower height polygon
                    # Get the geometry of the lower height polygon
                    lower_geometry = lower_feature.geometry()
                    # Check for intersection (overlap)
                    if current_geometry.intersects(lower_geometry):
                        # Perform a geometric difference to remove the overlapping area
                        current_geometry = current_geometry.difference(lower_geometry)
            # Add the resulting geometry to the results list
            new_feature = QgsFeature()
            new_feature.setGeometry(current_geometry)
            new_feature.setAttributes(feature.attributes())
            result_features.append(new_feature)
        # Create a new layer for the resulting features
        layerRtcc = QgsVectorLayer("Polygon?crs="+layerRtccTemp.crs().authid(), "RTCC Surfaces", "memory")
        # Create fields for the new layer (same as the original layer)
        layerRtcc.dataProvider().addAttributes(layerRtccTemp.fields())
        layerRtcc.updateFields()
        # Add the resulting features to the new layer
        layerRtcc.dataProvider().addFeatures(result_features)
        # Add the new layer to the map
        QgsProject.instance().addMapLayer(layerRtcc)

        #Add categorised symbolisation to RTCC Surfaces layer
        myRenderListRtcc = []
        for feature in layerRtcc.getFeatures():
            elev = feature['MVA Sector Elev (ft)']
            symbol = QgsSymbol.defaultSymbol(layerRtcc.geometryType())
            symbol.setColor(QColor(layerColors[str(elev)]))
            symbol.setOpacity(0.5)
            layerRender = QgsRendererCategory(elev, symbol, str(elev))
            myRenderListRtcc.append(layerRender)
        myRenderListRtcc.sort(key=lambda x: x.value())
        myRendererRtcc = QgsCategorizedSymbolRenderer("MVA Sector Elev (ft)", myRenderListRtcc)
        layerRtcc.setRenderer(myRendererRtcc)

        pass