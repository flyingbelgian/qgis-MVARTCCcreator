# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MvaRtccDialog
                                 A QGIS plugin
 Creates MVA and RTCC surfaces from coordinates in CSV
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-12-27
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Paul Haubourdin
        email                : paul.haubourdin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import csv

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog
from qgis.core import QgsCoordinateReferenceSystem

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'mva_rtcc_dialog_base.ui'))


class MvaRtccDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MvaRtccDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.filename = ""
        self.csvheadings = []
        self.csvsampledata = []
        self.crs = QgsCoordinateReferenceSystem("EPSG:4326")
        self.qgsCrs.setCrs(self.crs)
       
        self.btnSelectCSV.clicked.connect(self.evt_btnSelectCSV_clicked)
        self.cmbElevation.currentIndexChanged.connect(self.evt_cmbElevation_currentIndexChanged)
        self.cmbSurface.currentIndexChanged.connect(self.evt_cmbSurface_currentIndexChanged)
        self.cmbLat.currentIndexChanged.connect(self.evt_cmbLat_currentIndexChanged)
        self.cmbLon.currentIndexChanged.connect(self.evt_cmbLon_currentIndexChanged)
        self.qgsCrs.crsChanged.connect(self.evt_qgsCrs_crsChanged)

    def evt_btnSelectCSV_clicked(self):
        fileref = QFileDialog.getOpenFileName(self,"Open File", "C:", "Comma Separated Values (*.csv);;Plain Text (*.txt)")
        self.filename = fileref[0]

        with open(self.filename, "r", encoding="utf-8-sig") as file:
            csvfile = csv.reader(file)
            self.csvheadings = next(csvfile)
            self.csvsampledata = next(csvfile)
        
        self.txtCSV.setText(self.filename)
        self.cmbElevation.clear()
        self.cmbElevation.addItems(self.csvheadings)
        self.cmbElevation.setCurrentIndex(0)
        self.cmbElevation.setEnabled(True)
        self.cmbSurface.clear()
        self.cmbSurface.addItems(self.csvheadings)
        self.cmbSurface.setCurrentIndex(1)
        self.cmbSurface.setEnabled(True)
        self.cmbLat.clear()
        self.cmbLat.addItems(self.csvheadings)
        self.cmbLat.setCurrentIndex(2)
        self.cmbLat.setEnabled(True)
        self.cmbLon.clear()
        self.cmbLon.addItems(self.csvheadings)
        self.cmbLon.setCurrentIndex(3)
        self.cmbLon.setEnabled(True)
        self.qgsCrs.setEnabled(True)
        self.btnCreate.setEnabled(True)

    def evt_cmbElevation_currentIndexChanged(self):
        self.ledElevation.setText(self.csvsampledata[self.cmbElevation.currentIndex()])
    def evt_cmbSurface_currentIndexChanged(self):
        self.ledSurface.setText(self.csvsampledata[self.cmbSurface.currentIndex()])
    def evt_cmbLat_currentIndexChanged(self):
        self.ledLat.setText(self.csvsampledata[self.cmbLat.currentIndex()])
    def evt_cmbLon_currentIndexChanged(self):
        self.ledLon.setText(self.csvsampledata[self.cmbLon.currentIndex()])

    def evt_qgsCrs_crsChanged(self):
        self.crs = self.qgsCrs.crs()
